/*
 * Copyright (c) 2020 Zavarov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package vartas.discord.blanc.parser;

import vartas.discord.blanc.Guild;
import vartas.discord.blanc.Role;
import vartas.discord.blanc.TextChannel;
import vartas.discord.blanc.User;
import vartas.discord.blanc.command.Command;

import javax.annotation.Nonnull;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.NoSuchElementException;

/**
 * The {@link IntermediateCommand} generated by the parser is only able to store the argument as either a {@link String}
 * or {@link Number}. In order to allow more complex data types as arguments for the {@link Command Commands},
 * this class is able to further transform those {@link Argument Arguments} prior to the execution of the
 * associated {@link Command}.
 * @see StringArgument
 * @see MentionArgument
 * @see ExpressionArgument
 */
@Nonnull
public abstract class AbstractTypeResolver {
    /**
     * Attempts to transform the provided {@link Argument} into a {@link String}.<br>
     * This is done by using the interval value of the {@link StringArgument}.
     * @param argument the {@link Argument} associated with the {@link String}.
     * @return the {@link String} associated with the {@link Argument}.
     * @throws NoSuchElementException if the {@link Argument} can't be resolved as a {@link String}.
     */
    @Nonnull
    public String resolveString(@Nonnull Argument argument) throws NoSuchElementException {
        return new StringResolver().apply(argument).orElseThrow();
    }
    /**
     * Attempts to transform the provided {@link Argument} into a {@link LocalDate}.<br>
     * This is done by parsing the {@link String} value of the {@link StringArgument} using the default
     * formatter of {@link LocalDate}.
     * @see DateTimeFormatter#ISO_LOCAL_DATE
     * @param argument the {@link Argument} associated with the {@link LocalDate}.
     * @return the {@link LocalDate} associated with the {@link Argument}.
     * @throws NoSuchElementException if the {@link Argument} can't be resolved as a {@link LocalDate}.
     */
    @Nonnull
    public LocalDate resolveLocalDate(@Nonnull Argument argument) throws NoSuchElementException{
        return new LocalDateResolver().apply(argument).orElseThrow();
    }
    /**
     * Attempts to transform the provided {@link Argument} into a {@link BigDecimal}.<br>
     * This is done by using the interval value of the {@link ExpressionArgument}.
     * @param argument the {@link Argument} associated with the {@link BigDecimal}.
     * @return the {@link BigDecimal} associated with the {@link Argument}.
     * @throws NoSuchElementException if the {@link Argument} can't be resolved as a {@link BigDecimal}.
     */
    @Nonnull
    public BigDecimal resolveBigDecimal(@Nonnull Argument argument) throws NoSuchElementException{
        return new BigDecimalResolver().apply(argument).orElseThrow();
    }

    /**
     * Attempts to transform the provided {@link Argument} into a {@link Guild}.<br>
     * @param argument the {@link Argument} associated with the {@link Guild}.
     * @return the {@link Guild} associated with the {@link Argument}.
     * @throws NoSuchElementException if the {@link Argument} can't be resolved as a {@link Guild}.
     */
    @Nonnull
    public abstract Guild resolveGuild(@Nonnull Argument argument) throws NoSuchElementException;
    /**
     * Attempts to transform the provided {@link Argument} into a {@link User}.<br>
     * @param argument the {@link Argument} associated with the {@link User}.
     * @return the {@link User} associated with the {@link Argument}.
     * @throws NoSuchElementException if the {@link Argument} can't be resolved as a {@link User}.
     */
    @Nonnull
    public abstract User resolveUser(@Nonnull Argument argument) throws NoSuchElementException;

    /**
     * Attempts to transform the provided {@link Argument} into a {@link TextChannel}.<br>
     * @param guild the {@link Guild} associated with the {@link TextChannel}.
     * @param argument the {@link Argument} associated with the {@link TextChannel}.
     * @return the {@link TextChannel} associated with the {@link Argument}.
     * @throws NoSuchElementException if the {@link Argument} can't be resolved as a {@link TextChannel}.
     */
    @Nonnull
    public abstract TextChannel resolveTextChannel(@Nonnull Guild guild, @Nonnull Argument argument) throws NoSuchElementException;

    /**
     * Attempts to transform the provided {@link Argument} into a {@link Role}.<br>
     * @param guild the {@link Guild} associated with the {@link TextChannel}.
     * @param argument the {@link Argument} associated with the {@link Role}.
     * @return the {@link Role} associated with the {@link Argument}.
     * @throws NoSuchElementException if the {@link Argument} can't be resolved as a {@link Role}.
     */
    @Nonnull
    public abstract Role resolveRole(@Nonnull Guild guild, @Nonnull Argument argument) throws NoSuchElementException;
}
