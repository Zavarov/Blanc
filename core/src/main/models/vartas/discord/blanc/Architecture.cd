package vartas.discord.blanc;

import com.google.common.cache.Cache.Cache;
import java.awt.Color.Color;
import java.io.InputStream.InputStream;
import java.lang.Object.Object;
import java.lang.RuntimeException.RuntimeException;
import java.nio.file.Path.Path;
import java.time.Instant.Instant;
import java.util.Collection.Collection;
import java.util.List.List;
import java.util.Optional.Optional;
import java.util.Set.Set;
import vartas.reddit.Submission.Submission;

public classdiagram Architecture {
    public class Client {
        - List<Shard> shards;
    }

    public class Shard {
        - int id;
        - Cache<Long, Guild> guilds;
        - Cache<Long, User> users;
        - SelfUser selfUser;
    }

    public abstract class Snowflake {
        - long id;
        - String name;
    }

    public abstract class User extends Snowflake {
        - Optional<PrivateChannel> channel;
        - Collection<Rank> ranks;
    }

    public interface SelfUser{
        void modifyStatusMessage(String statusMessage);
        void modifyAvatar(InputStream avatar);
    }

    public abstract class MessageChannel extends Snowflake{
        <<initialized="P1D">>
        - Cache<Long, Message> messages;

        + abstract void send(Message message);
        + abstract void send(MessageEmbed messageEmbed);
        + abstract void send(Submission submission);
        + abstract void send(byte[] bytes, String qualifiedName);
        + abstract void send(Role role);
        + abstract void send(Member member);
        + abstract void send(Guild guild);
        + abstract void send(Object object);
    }

    public abstract class PrivateChannel extends MessageChannel{
    }

    //------------------------------------------------------------------------------------------------------------------
    //
    //      Message
    //
    //------------------------------------------------------------------------------------------------------------------

    public class Message {
        - long id;
        - Instant created;
        - User author;
        - Optional<String> content;
        - Optional<MessageEmbed> messageEmbed;
        - List<Attachment> attachments;
    }

    public class MessageEmbed {
        - Optional<Color> color;
        - Optional<String> thumbnail;
        - Optional<Title> title;
        - Optional<String> content;
        - Optional<Instant> timestamp;
        - Optional<Author> author;
        - List<Field> fields;
    }

    public class Author {
        - String name;
        - Optional<String> url;
    }

    public class Title {
        - String name;
        - Optional<String> url;
    }

    public class Field {
        - String title;
        - Object content;
        - boolean inline;
    }

    public class Attachment{
        - Optional<InputStream> content;
        + void download();
    }

    //------------------------------------------------------------------------------------------------------------------
    //
    //      Guild
    //
    //------------------------------------------------------------------------------------------------------------------
    public abstract class Guild extends Snowflake {
        - Optional<String> prefix;
        - Cache<Long, Member> members;
        - Cache<Long, TextChannel> channels;
        - Cache<Long, Role> roles;
        - List<String> blacklist;
        - SelfMember selfMember;

        + abstract void leave();
    }

    public abstract class Role extends Snowflake {
        - Optional<String> group;
    }

    public abstract class Member extends User{
        - List<Role> roles;
        - Optional<String> nickname;
    }

    public interface SelfMember{
        void modifyNickname(String nickname);
    }

    public abstract class TextChannel extends MessageChannel{
        - Set<String> subreddits;
        - Cache<String, Webhook> webhooks;
    }

    public abstract class Webhook extends MessageChannel {}

    public class WebhookException extends RuntimeException{}

    /**
     * This enumeration contains the different modules of a guild.
     */
    public enum GuildModule {
        /**
         * Each guild can have a custom prefix. This is to avoid collisions with other bots.
         */
        PREFIX,
        /**
         * Each guild can ban usage of certain expressions, such as invitation links or profanity.
         */
        BLACKLIST,
        /**
         * Self-assignable roles can be grouped together. For each group, a member can have at most
         * one of its roles assigned at a time.
         */
        GROUP,
        /**
         * Each text channel can be linked to one or more subreddits. Any new submission will then be posted
         * in that channel.
         */
        SUBREDDIT;
    }

    /**
     * This enumeration contains all possible ranks for the individual users.
     * Unless specified otherwise, every user has the USER rank, by default.
     */
    public enum Rank {
        /**
         * An additional rank required for communicating with the Reddit API.
         */
        REDDIT,
        /**
         * The default rank of every user. Those are not able to access the internal functions of the program.
         */
        USER,
        /**
         * Users with this rank are able to access the internal functions of the program, but are not able to interact
         * with anything that would interfere with the guilds the program is associated with.
         */
        DEVELOPER,
        /**
         * Users with this rank are able to access the whole functionality of the bot. Every internal permission check
         * will be ignored, meaning that this rank should be exclusive to trusted users.
         */
        ROOT;
    }

    /**
     * A (possibly incomplete) collection of all permissions according to
     * https://discordapp.com/developers/docs/topics/permissions
     */
    public enum Permission{
        CREATE_INSTANT_INVITE,
        KICK_MEMBERS,
        BAN_MEMBERS,
        ADMINISTRATOR,
        MANAGE_CHANNELS,
        MANAGE_GUILD,
        ADD_REACTIONS,
        VIEW_AUDIT_LOG,
        PRIORITY_SPEAKER,
        STREAM,
        VIEW_CHANNEL,
        SEND_MESSAGES,
        SEND_TTS_MESSAGES,
        MANAGE_MESSAGES,
        EMBED_LINKS,
        ATTACH_FILES,
        READ_MESSAGE_HISTORY,
        MENTION_EVERYONE,
        USE_EXTERNAL_EMOJIS,
        VIEW_GUILD_INSIGHTS,
        CONNECT,
        SPEAK,
        MUTE_MEMBERS,
        DEAFEN_MEMBERS,
        MOVE_MEMBERS,
        USE_VAD,
        CHANGE_NICKNAME,
        MANAGE_NICKNAMES,
        MANAGE_ROLES,
        MANAGE_WEBHOOKS,
        MANAGE_EMOJIS;
    }
}