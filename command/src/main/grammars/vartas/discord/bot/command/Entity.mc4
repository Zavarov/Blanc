package vartas.discord.bot.command;

/**
 * This grammar defines the syntax of the parameter specified in Parameter.mc4.
 */
component grammar Entity extends de.monticore.MCBasicLiterals, de.monticore.expressions.CommonExpressions, de.monticore.expressions.ExpressionsBasis{
    ExtLiteral = SignedLiteral;

    interface EntityType;

    /*=========================================================*/
    /*========================  Misc  =========================*/
    /*=========================================================*/

    IdType implements EntityType =
        id:BasicLongLiteral
    ;

    StringType implements EntityType =
        StringLiteral
    ;

    OnlineStatusType implements EntityType =
        status:Name
    ;

    IntervalType implements EntityType =
        interval:Name
    ;

    /*=========================================================*/
    /*========================  Time  =========================*/
    /*=========================================================*/

    DateType implements EntityType =
          day:NatLiteral "-"
        month:NatLiteral "-"
         year:NatLiteral
    ;

    /*=========================================================*/
    /*==================  Discord Entities  ===================*/
    /*=========================================================*/

    MemberType implements EntityType =
        "<" "@" "!"? id:BasicLongLiteral ">"
    ;

    UserType implements EntityType =
        "<" "@" id:BasicLongLiteral ">"
    ;

    TextChannelType implements EntityType =
        "<" "#" id:BasicLongLiteral ">"
    ;

    RoleType implements EntityType =
        "<" "@" "&" id:BasicLongLiteral ">"
    ;

    /*=========================================================*/
    /*================  Arithmetic Expression  ================*/
    /*=========================================================*/

    ExpressionType implements EntityType =
        Expression
    ;

    interface SingleArgument = Expression;

    AtArgument implements SingleArgument =
        "@" Expression
    ;

    BracketArgument implements SingleArgument =
        "(" Expression ")"
    ;

    PowExpression implements Expression <185> =
        Expression operator:"^" amount:SignedNatLiteral
    ;

    RandomNumberExpression implements Expression <250> =
        "random" "(" dice:Expression "," eyes:Expression ")"
    ;

    AbsExpression implements Expression <250> =
        "abs" argument:SingleArgument
    ;

    ACosExpression implements Expression <250> =
        "acos" argument:SingleArgument
    ;

    ASinExpression implements Expression <250> =
        "asin" argument:SingleArgument
    ;

    ATanExpression implements Expression <250> =
        "atan" argument:SingleArgument
    ;

    CeilExpression implements Expression <250> =
        "ceil" argument:SingleArgument
    ;

    CosExpression implements Expression <250> =
        "cos" argument:SingleArgument
    ;

    FloorExpression implements Expression <250> =
        "floor" argument:SingleArgument
    ;

    LogExpression implements Expression <250> =
        "log" argument:SingleArgument
    ;

    LnExpression implements Expression <250> =
        "ln" argument:SingleArgument
    ;

    MaxExpression implements Expression <250> =
        "max" "(" left:Expression "," right:Expression ")"
    ;

    MinExpression implements Expression <250> =
        "min" "(" left:Expression "," right:Expression ")"
    ;

    SinExpression implements Expression <250> =
        "sin" argument:SingleArgument
    ;

    SqrtExpression implements Expression <250> =
        "sqrt" argument:SingleArgument
    ;

    TanExpression implements Expression <250> =
        "tan" argument:SingleArgument
    ;
}
